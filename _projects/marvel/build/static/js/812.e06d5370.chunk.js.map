{"version":3,"file":"static/js/812.e06d5370.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: 'block',\r\n        width: '250px',\r\n        height: '250px',\r\n        objectFit: 'contain',\r\n        margin: '0 auto',\r\n      }}\r\n      src={img}\r\n      alt='Error'\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n  const [char, setChar] = useState(null);\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  return (\n    <div className='randomchar'>\n      {setContent(process, View, char)}\n      <div className='randomchar__static'>\n        <p className='randomchar__title'>\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className='randomchar__title'>Or choose another one</p>\n        <button\n          onClick={updateChar}\n          className='button button__main'\n        >\n          <div className='inner'>try it</div>\n        </button>\n        <img\n          src={mjolnir}\n          alt='mjolnir'\n          className='randomchar__decoration'\n        />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki } = data;\n  let imgStyle = { objectFit: 'cover' };\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n    imgStyle = { objectFit: 'contain' };\n  }\n\n  return (\n    <div className='randomchar__block'>\n      <img\n        src={thumbnail}\n        alt='Random character'\n        className='randomchar__img'\n        style={imgStyle}\n      />\n      <div className='randomchar__info'>\n        <p className='randomchar__name'>{name}</p>\n        <p className='randomchar__descr'>{description}</p>\n        <div className='randomchar__btns'>\n          <a\n            href={homepage}\n            className='button button__main'\n          >\n            <div className='inner'>homepage</div>\n          </a>\n          <a\n            href={wiki}\n            className='button button__secondary'\n          >\n            <div className='inner'>Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case 'waiting':\n      return <Spinner />;\n    case 'loading':\n      return newItemLoading ? <Component /> : <Spinner />;\n    case 'confirmed':\n      return <Component />;\n    case 'error':\n      return <ErrorMessage />;\n    default:\n      throw new Error('Unexpected process state');\n  }\n};\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { getAllCharacters, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemLoading((newItemLoading) => false);\n    setOffset((offset) => offset + 9);\n    setCharEnded((charEnded) => ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) => item.classList.remove('char__item_selected'));\n    itemRefs.current[id].classList.add('char__item_selected');\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: 'cover' };\n      if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { objectFit: 'unset' };\n      }\n\n      return (\n        <CSSTransition\n          key={item.id}\n          timeout={500}\n          classNames='char__item'\n        >\n          <li\n            className='char__item'\n            tabIndex={0}\n            ref={(el) => (itemRefs.current[i] = el)}\n            onClick={() => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}\n            onKeyPress={(e) => {\n              if (e.key === ' ' || e.key === 'Enter') {\n                props.onCharSelected(item.id);\n                focusOnItem(i);\n              }\n            }}\n          >\n            <img\n              src={item.thumbnail}\n              alt={item.name}\n              style={imgStyle}\n            />\n            <div className='char__name'>{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <ul className='char__grid'>\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  }\n\n  const elements = useMemo(() => {\n    return setContent(process, () => renderItems(charList), newItemLoading);\n    // eslint-disable-next-line\n  }, [process]);\n\n  return (\n    <div className='char__list'>\n      {elements}\n      <button\n        className='button button__main button__long'\n        disabled={newItemLoading}\n        style={{ display: charEnded ? 'none' : 'block' }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className='inner'>load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    // eslint-disable-next-line\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  return <div className='char__info'>{setContent(process, View, char)}</div>;\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n  let imgStyle = { objectFit: 'cover' };\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n    imgStyle = { objectFit: 'contain' };\n  }\n\n  return (\n    <>\n      <div className='char__basics'>\n        <img\n          src={thumbnail}\n          alt={name}\n          style={imgStyle}\n        />\n        <div>\n          <div className='char__info-name'>{name}</div>\n          <div className='char__btns'>\n            <a\n              href={homepage}\n              className='button button__main'\n            >\n              <div className='inner'>homepage</div>\n            </a>\n            <a\n              href={wiki}\n              className='button button__secondary'\n            >\n              <div className='inner'>Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className='char__descr'>{description}</div>\n      <div className='char__comics'>Comics:</div>\n      <ul className='char__comics-list'>\n        {comics.length > 0 ? null : 'There is no comics with this character'}\n        {comics.map((item, i) => {\n          // eslint-disable-next-line\n          if (i > 9) return;\n          return (\n            <li\n              key={i}\n              className='char__comics-item'\n            >\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n  const [char, setChar] = useState(null);\n  const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = (name) => {\n    clearError();\n\n    getCharacterByName(name)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const errorMessage =\n    process === 'error' ? (\n      <div className='char__search-critical-error'>\n        <ErrorMessage />\n      </div>\n    ) : null;\n  const results = !char ? null : char.length > 0 ? (\n    <div className='char__search-wrapper'>\n      <div className='char__search-success'>There is! Visit {char[0].name} page?</div>\n      <Link\n        to={`/characters/${char[0].id}`}\n        className='button button__secondary'\n      >\n        <div className='inner'>To page</div>\n      </Link>\n    </div>\n  ) : (\n    <div className='char__search-error'>The character was not found. Check the name and try again</div>\n  );\n\n  return (\n    <div className='char__search-form'>\n      <Formik\n        initialValues={{\n          charName: '',\n        }}\n        validationSchema={Yup.object({\n          charName: Yup.string().required('This field is required'),\n        })}\n        onSubmit={({ charName }) => {\n          updateChar(charName);\n        }}\n      >\n        <Form>\n          <label\n            className='char__search-label'\n            htmlFor='charName'\n          >\n            Or find a character by name:\n          </label>\n          <div className='char__search-wrapper'>\n            <Field\n              id='charName'\n              name='charName'\n              type='text'\n              placeholder='Enter name'\n            />\n            <button\n              type='submit'\n              className='button button__main'\n              disabled={process === 'loading'}\n            >\n              <div className='inner'>find</div>\n            </button>\n          </div>\n          <FormikErrorMessage\n            component='div'\n            className='char__search-error'\n            name='charName'\n          />\n        </Form>\n      </Formik>\n      {results}\n      {errorMessage}\n    </div>\n  );\n};\n\nexport default CharSearchForm;\n","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n          name='description'\r\n          content='Marvel information portal'\r\n        />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className='char__content'>\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img\r\n        className='bg-decoration'\r\n        src={decoration}\r\n        alt='vision'\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useHttp } from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n  const { request, clearError, process, setProcess } = useHttp();\n\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n  const _apiKey = 'apikey=26e626b9c671327ef36f572642889e3a';\n  const _baseOffset = 210;\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacterByName = async (name) => {\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async (id) => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const getAllComics = async (offset = 0) => {\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformComics);\n  };\n\n  const getComic = async (id) => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComics(res.data.results[0]);\n  };\n\n  const _transformCharacter = (char) => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description\n        ? `${char.description.slice(0, 210)}...`\n        : 'There is no description for this character',\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || 'There is no description',\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n      language: comics.textObjects[0]?.language || 'en-us',\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\n    };\n  };\n\n  return {\n    clearError,\n    getAllCharacters,\n    getCharacterByName,\n    getCharacter,\n    getAllComics,\n    getComic,\n    process,\n    setProcess,\n  };\n};\n\nexport default useMarvelService;\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(\r\n    async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n      setProcess('loading');\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could nor fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        return data;\r\n      } catch (e) {\r\n        setProcess('error');\r\n\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess('loading');\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Skeleton />;\r\n    case 'loading':\r\n      return <Spinner />;\r\n    case 'confirmed':\r\n      return <Component data={data} />;\r\n    case 'error':\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","_Fragment","charId","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","error","_createClass","value","errorInfo","console","log","this","setState","getCharacterByName","errorMessage","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","selectedChar","Helmet","content","RandomChar","CharList","CharInfo","CharSearchForm","decoration","_useHttp","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","status","json","abrupt","t0","stop","_x","useHttp","_apiBase","_apiKey","res","_transformCharacter","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","slice","path","extension","urls","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton"],"sourceRoot":""}